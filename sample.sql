WITH OUT_PROD_DF AS(
    SELECT GRADE
         , YEAR
         , YM
         , OUT_PROD_CNT
         , LAG(OUT_PROD_CNT) OVER(PARTITION BY YEAR,GRADE ORDER BY YM) AS PRE_OUT_PROD_CNT
         , CAST(OUT_PROD_CNT - LAG(OUT_PROD_CNT) OVER(PARTITION BY YEAR, GRADE ORDER BY YM) AS DOUBLE)/CAST(OUT_PROD_CNT AS DOUBLE)*100  AS OUT_PROD_INCRES
         , SELF_OUT_PROD_CNT
         , LAG(SELF_OUT_PROD_CNT) OVER(PARTITION BY YEAR,GRADE ORDER BY YM) AS PRE_SELF_OUT_PROD_CNT
         , CAST(SELF_OUT_PROD_CNT - LAG(SELF_OUT_PROD_CNT) OVER(PARTITION BY YEAR,GRADE ORDER BY YM) AS DOUBLE)/CAST(SELF_OUT_PROD_CNT AS DOUBLE)*100  AS SELF_OUT_PROD_INCRE
    FROM(
        SELECT IF(DATE_FORMAT(A.DT,'%Y%m%d') BETWEEN '20230901' AND '20240331','2024','2025') AS YEAR
             , DATE_FORMAT(A.DT,'%Y-%m') AS YM
             , CASE
                  WHEN A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) >= 60 THEN '6) MVIP'
                  WHEN A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) >= 36 THEN '5) VIP'
                  WHEN A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) >= 12 THEN '4) GOLD'
                  WHEN A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) >= 6 THEN '3) SILVER'
                  WHEN A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) >= 3 THEN '2) GREEN'
                  ELSE '1) 일반'
               END AS GRADE
             , COUNT(DISTINCT A.BUY_NO) AS OUT_PROD_CNT
             , COUNT(DISTINCT IF(A.PROD_STAT_CD IN (3100, 3401, 3701, 4000, 3200, 3201),A.BUY_NO)) AS SELF_OUT_PROD_CNT
        FROM HADOOP_KENT.MELON_MA_STAT_PRODUCTION.F_PROD_USER_FXMT_DT A 
        JOIN HADOOP_KENT.MELON_MA_STAT_PRODUCTION.D_PROD B  ON (A.PROD_ID = B.PROD_ID)
        LEFT OUTER JOIN MELON_MA_STAT_PRODUCTION.F_PROD_NEW_ANLS_DT C ON (A.FIRST_BUY_NO = C.FIRST_BUY_NO AND A.BUY_NO >= C.BUY_NO)
        LEFT OUTER JOIN MELON_ODS_COMMERCE_PRODUCTION.SBY_BUY_HIST D ON (C.BUY_NO = D.BUY_NO)
        WHERE (A.LOG_DATE BETWEEN CAST('20230901' AS VARCHAR(8)) AND CAST('20240331' AS VARCHAR(8)) OR A.LOG_DATE BETWEEN CAST('20240901' AS VARCHAR(8)) AND CAST('20250131' AS VARCHAR(8)))
        AND (DATE_FORMAT(A.DT,'%Y%m%d') BETWEEN CAST('20230901' AS VARCHAR(8)) AND CAST('20240331' AS VARCHAR(8)) OR A.LOG_DATE BETWEEN CAST('20240901' AS VARCHAR(8)) AND CAST('20250131' AS VARCHAR(8)))
        AND A.PF_YN = 1 -- 유료
        AND DATE(A.VLD_STRT_DATE) <= DATE(A.VLD_END_DATE)
        AND B.PROD_ATTR_CD NOT IN (10040, 10050)
        AND B.PROD_SELL_PRT_CD = 60000 -- B2C
        AND B.PROD_PRT_CD IN ( 20000, 20010 )
        AND PROD_STAT_CD IN (3100, 3401, 3701, 3200, 3201, 3400, 3402, 3300, 3301, 3903, 3900, 3902, 3500, 3700)
        GROUP BY 1,2,3
    )
), PROD_DF AS(
    SELECT YEAR
         , YM
         , GRADE
         , PROD_CNT
         , LAG(PROD_CNT) OVER(PARTITION BY GRADE ORDER BY YM) AS PRE_PROD_CNT
         , CAST(PROD_CNT - LAG(PROD_CNT) OVER(PARTITION BY GRADE ORDER BY YM) AS DOUBLE)/CAST(PROD_CNT AS DOUBLE)*100  AS PROD_INCRE
         , NEW_PROD_CNT
         , LAG(NEW_PROD_CNT) OVER(PARTITION BY GRADE ORDER BY YM) AS PRE_NEW_PROD_CNT
         , CAST(NEW_PROD_CNT - LAG(NEW_PROD_CNT) OVER(PARTITION BY GRADE ORDER BY YM) AS DOUBLE)/CAST(NEW_PROD_CNT AS DOUBLE)*100  AS NEW_PROD_INCRE
    FROM(
    SELECT YEAR
         , YM
         , CASE
              WHEN AT_BUY_CNT >= 60 THEN '6) MVIP'
              WHEN AT_BUY_CNT >= 36 THEN '5) VIP'
              WHEN AT_BUY_CNT >= 12 THEN '4) GOLD'
              WHEN AT_BUY_CNT >= 6 THEN '3) SILVER'
              WHEN AT_BUY_CNT >= 3 THEN '2) GREEN'
              ELSE '1) 일반'
           END AS GRADE
         , SUM(PROD_CNT) AS PROD_CNT
         , SUM(IF(NEW_GRADE_YN = 1,PROD_CNT,0)) AS NEW_PROD_CNT
    FROM(
    SELECT IF(DATE_FORMAT(A.DT,'%Y%m%d') BETWEEN '20230930' AND '20240331','2024','2025') AS YEAR
         , DATE_FORMAT(A.DT,'%Y-%m') AS YM
         , A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) AS AT_BUY_CNT
         , IF(A.AT_BUY_CNT - COALESCE(D.AUTO_BUY_CO , 0) IN (0,3,6,12,36,60),1,0) AS NEW_GRADE_YN
         , COUNT(DISTINCT A.BUY_NO) AS PROD_CNT
    FROM HADOOP_KENT.MELON_MA_STAT_PRODUCTION.F_PROD_USER_FXMT_DT A 
    JOIN HADOOP_KENT.MELON_MA_STAT_PRODUCTION.D_PROD B  ON (A.PROD_ID = B.PROD_ID)
    LEFT OUTER JOIN MELON_MA_STAT_PRODUCTION.F_PROD_NEW_ANLS_DT C ON (A.FIRST_BUY_NO = C.FIRST_BUY_NO AND A.BUY_NO >= C.BUY_NO)
    LEFT OUTER JOIN MELON_ODS_COMMERCE_PRODUCTION.SBY_BUY_HIST D ON (C.BUY_NO = D.BUY_NO)
    WHERE A.LOG_DATE IN ('20230930','20231031','20231130','20231231','20240131','20240229','20240331','20241031','20241130','20241231','20250131','20250228')
    AND DATE_FORMAT(A.DT,'%Y%m%d') IN ('20230930','20231031','20231130','20231231','20240131','20240229','20240331','20241031','20241130','20241231','20250131','20250228')
    AND A.PF_YN = 1 -- 유료
    AND A.PROD_STAT_CD NOT IN (3401, 3901)
    AND DATE(A.VLD_STRT_DATE) <= DATE(A.VLD_END_DATE)
    AND B.PROD_ATTR_CD NOT IN (10040, 10050)
    AND B.PROD_SELL_PRT_CD IN (60000) -- B2C
    GROUP BY 1,2,3,4
    )
    GROUP BY 1,2,3
    )
)

SELECT A.YEAR
     , A.YM
     , A.GRADE AS "등급::filter"
     , A.PROD_CNT
     , A.PRE_PROD_CNT
     , A.PROD_INCRE
     , A.NEW_PROD_CNT
     , A.PRE_NEW_PROD_CNT
     , A.NEW_PROD_INCRE
     , B.OUT_PROD_CNT
     , B.PRE_OUT_PROD_CNT
     , B.OUT_PROD_INCRE
     , B.SELF_OUT_PROD_CNT
     , B.PRE_SELF_OUT_PROD_CNT
     , B.SELF_OUT_PROD_INCRE
FROM PROD_DF A
LEFT JOIN OUT_PROD_DF B ON A.YM = B.YM AND A.GRADE = B.GRADE
WHERE A.YM NOT IN ('2023-09','2024-09')
ORDER BY 3,2